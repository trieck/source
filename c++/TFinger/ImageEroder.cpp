#include "StdAfx.h"
#include "ImageEroder.h"

// "structuring elements" used in the erosion process
static const BYTE ELEM0[3][3] = {
	0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0xFF
};

static const BYTE ELEM1[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM2[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM3[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0x00, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM4[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM5[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM6[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM7[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM8[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM9[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM10[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0x00, 0xFF,
	0xFF, 0xFF, 0x00, 0x00, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM11[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0x00, 0xFF,
	0xFF, 0xFF, 0x00, 0x00, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM12[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM13[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM14[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0x00, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const BYTE ELEM15[5][5] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0x00, 0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

ImageEroder::ImageEroder()
{
	m_kernels.push_back(Kernel::MakeKernel(3, &ELEM0[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM1[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM2[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM3[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM4[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM5[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM6[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM7[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM8[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM9[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM10[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM11[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM12[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM13[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM14[0][0]));
	m_kernels.push_back(Kernel::MakeKernel(5, &ELEM15[0][0]));
}

ImageEroder::~ImageEroder()
{
	KernelVec::iterator it = m_kernels.begin();
	for ( ; it != m_kernels.end(); it++) {
		delete (*it);
	}

	m_kernels.clear();
}

void ImageEroder::Erode(CImage &image)
{
	CPointVec v;
	KernelVec::iterator it = m_kernels.begin();
	for ( ; it != m_kernels.end(); it++) {
		Erode(image, *it);
	}
}

void ImageEroder::Erode(CImage &image, Kernel *pKernel)
{
	int rows = image.GetHeight();
	int cols = image.GetWidth();
	int pitch = image.GetPitch();

	LPBYTE pbits = reinterpret_cast<LPBYTE>(image.GetBits());

	for (int y = 0; y < rows; y++) {
		for (int x = 0; x < cols; x++) {
			BYTE &p = pbits[y*pitch+x];

			if (p == 0x00) {	// foreground
				if (Match(image, pKernel, x, y)) {
					Erode(image, pKernel, x, y);
				}
			}
		}
	}
}

void ImageEroder::Erode(CImage &image, Kernel *pKernel,
                        int x, int y)
{
	int rows = image.GetHeight();
	int cols = image.GetWidth();
	int pitch = image.GetPitch();

	int blocksize = pKernel->GetBlockSize();
	int cx = x - ((blocksize-1) / 2);
	int cy = y - ((blocksize-1) / 2);

	LPBYTE pbits = reinterpret_cast<LPBYTE>(image.GetBits());

	for (int j = cy, l = 0; j < cy + blocksize; j++, l++) {
		for (int i = cx, k = 0; i < cx + blocksize; i++, k++) {
			if (j < 0 || i < 0 || j >= rows || i >= cols)
				continue;
			if (!pKernel->GetPixel(k, l))
				pbits[j*pitch+i] = 0xFF;	// background
		}
	}
}