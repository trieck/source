#include "StdAfx.h"
#include "ImageDilater.h"

// "structuring elements" used in the dilation process
static const BYTE ELEM0[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00
};

static const BYTE ELEM1[3][3] = {
    0x00, 0xFF, 0x00,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00
};

static const BYTE ELEM2[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF,
    0x00, 0x00, 0x00
};

static const BYTE ELEM3[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0x00, 0xFF, 0x00
};

static const BYTE ELEM4[3][3] = {
    0x00, 0x00, 0x00,
    0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x00
};

static const BYTE ELEM5[3][3] = {
    0x00, 0x00, 0xFF,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00
};

static const BYTE ELEM6[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0xFF
};

static const BYTE ELEM7[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0xFF, 0x00, 0x00
};

static const BYTE ELEM8[3][3] = {
    0xFF, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00
};

static const BYTE ELEM9[3][3] = {
    0x00, 0xFF, 0xFF,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00
};

static const BYTE ELEM10[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0xFF,
    0x00, 0x00, 0xFF
};

static const BYTE ELEM11[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0xFF, 0xFF, 0x00
};

static const BYTE ELEM12[3][3] = {
    0xFF, 0x00, 0x00,
    0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x00
};

static const BYTE ELEM13[3][3] = {
    0x00, 0x00, 0xFF,
    0x00, 0xFF, 0xFF,
    0x00, 0x00, 0x00
};

static const BYTE ELEM14[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0x00, 0xFF, 0xFF
};

static const BYTE ELEM15[3][3] = {
    0x00, 0x00, 0x00,
    0xFF, 0xFF, 0x00,
    0xFF, 0x00, 0x00
};

static const BYTE ELEM16[3][3] = {
    0xFF, 0xFF, 0x00,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00
};

static const BYTE ELEM17[3][3] = {
    0x00, 0x00, 0xFF,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0xFF
};

static const BYTE ELEM18[3][3] = {
    0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0xFF, 0x00, 0xFF
};

static const BYTE ELEM19[3][3] = {
    0xFF, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0xFF, 0x00, 0x00
};

static const BYTE ELEM20[3][3] = {
    0x00, 0x00, 0xFF,
    0x00, 0xFF, 0x00,
    0xFF, 0x00, 0x00
};

static const BYTE ELEM21[3][3] = {
    0xFF, 0x00, 0x00,
    0x00, 0xFF, 0x00,
    0x00, 0x00, 0xFF
};

static const BYTE ELEM22[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE ELEM23[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE ELEM24[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00,
    0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE ELEM25[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE ELEM26[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE ELEM27[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE ELEM28[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00,
    0x00, 0xFF, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE ELEM29[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00,
    0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

static const BYTE ELEM30[5][5] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

ImageDilater::ImageDilater()
{
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM0[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM1[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM2[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM3[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM4[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM5[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM6[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM7[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM8[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM9[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM10[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM11[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM12[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM13[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM14[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM15[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM16[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM17[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM18[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM19[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM20[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(3, &ELEM21[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM22[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM23[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM24[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM25[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM26[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM27[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM28[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM29[0][0]));
    m_kernels.push_back(Kernel::MakeKernel(5, &ELEM30[0][0]));
}

ImageDilater::~ImageDilater()
{
    KernelVec::iterator it = m_kernels.begin();
    for ( ; it != m_kernels.end(); it++) {
        delete (*it);
    }

    m_kernels.clear();
}

void ImageDilater::Dilate(CImage &image)
{
    KernelVec::iterator it = m_kernels.begin();
    for ( ; it != m_kernels.end(); it++) {
        Dilate(image, *it);
    }
}

void ImageDilater::Dilate(CImage &image, Kernel *pKernel)
{
    int rows = image.GetHeight();
    int cols = image.GetWidth();
    int pitch = image.GetPitch();

    LPBYTE pbits = reinterpret_cast<LPBYTE>(image.GetBits());

    for (int y = 0; y < rows; y++) {
        for (int x = 0; x < cols; x++) {
            BYTE &p = pbits[y*pitch+x];

            if (p == 0xFF) {	// background
                if (Match(image, pKernel, x, y)) {
                    Dilate(image, pKernel, x, y);
                }
            }
        }
    }
}

void ImageDilater::Dilate(CImage &image, Kernel *pKernel,
                          int x, int y)
{
    int rows = image.GetHeight();
    int cols = image.GetWidth();
    int pitch = image.GetPitch();

    int blocksize = pKernel->GetBlockSize();
    int cx = x - ((blocksize-1) / 2);
    int cy = y - ((blocksize-1) / 2);

    LPBYTE pbits = reinterpret_cast<LPBYTE>(image.GetBits());

    for (int j = cy, l = 0; j < cy + blocksize; j++, l++) {
        for (int i = cx, k = 0; i < cx + blocksize; i++, k++) {
            if (j < 0 || i < 0 || j >= rows || i >= cols)
                continue;
            if (pKernel->GetPixel(k, l) == 0xFF)
                pbits[j*pitch+i] = 0x00;	// foreground
        }
    }
}
