/////////////////////////////////////////////////////////////////////////////
//
// FILEBLOCKS.CPP : file block list abstraction
//
// LIBADF : A C++ Amiga Disk File Libary
// Copyright(c) 2009 Thomas A. Rieck, All Rights Reserved
// Adapted from ADF Library, Copyright(c) 1997-2002 Laurent Clevy.
//

#include "common.h"
#include "FileBlocks.h"
#include "adf.h"

/////////////////////////////////////////////////////////////////////////////
FileBlocks::FileBlocks() : header(0)
{
	data.reserve(MAX_DATABLK);
	extens.reserve(MAX_DATABLK);
}

/////////////////////////////////////////////////////////////////////////////
FileBlocks::FileBlocks(const FileBlocks &blocks)
{
	*this = blocks;
}

/////////////////////////////////////////////////////////////////////////////
FileBlocks::~FileBlocks()
{
}

/////////////////////////////////////////////////////////////////////////////
FileBlocks &FileBlocks::operator = (const FileBlocks &blocks)
{
	if (this != &blocks) {
		header = blocks.header;
		extens = blocks.extens;
		data = blocks.data;
	}

	return *this;
}

/////////////////////////////////////////////////////////////////////////////
void FileBlocks::addExten(uint32_t blockno)
{
	extens.push_back(blockno);
}


/////////////////////////////////////////////////////////////////////////////
void FileBlocks::addData(uint32_t blockno)
{
	data.push_back(blockno);
}

/////////////////////////////////////////////////////////////////////////////
block_iterator FileBlocks::getExtenBegin() const
{
	return extens.begin();
}

/////////////////////////////////////////////////////////////////////////////
block_iterator FileBlocks::getExtenEnd() const
{
	return extens.end();
}

/////////////////////////////////////////////////////////////////////////////
block_iterator FileBlocks::getDataBegin() const
{
	return data.begin();
}

/////////////////////////////////////////////////////////////////////////////
block_iterator FileBlocks::getDataEnd() const
{
	return data.end();
}
