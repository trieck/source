///////////////////////////////////////////////////////////////////////////////// COMUTILS.CPP : Win32 COM utility classes//#include "common.h"#include "comutils.h"#include <atlbase.h>LPCTSTR ComClasses::rootKey = _T("CLSID");LPCTSTR ComInterfaces::rootKey = _T("Interface");/////////////////////////////////////////////////////////////////////////////ComClass::ComClass(const ComClass & C){		clsid = C.clsid;	name = C.name;	progid = C.progid;}/////////////////////////////////////////////////////////////////////////////ComClass & ComClass::operator =(const ComClass & C){		if (this != &C) {		clsid = C.clsid;		name = C.name;		progid = C.progid;	}	return *this;}/////////////////////////////////////////////////////////////////////////////ComClasses::ComClasses(){	load();}/////////////////////////////////////////////////////////////////////////////ComClasses::~ComClasses(){	clear();}/////////////////////////////////////////////////////////////////////////////void ComClasses::clear(){	const_iterator it = begin();	for ( ; it != end(); it++) {		delete (*it).second;	}	ClassMap::clear();}/////////////////////////////////////////////////////////////////////////////void ComClasses::load(){	CRegKey key;	if (key.Open(HKEY_CLASSES_ROOT, rootKey, KEY_READ) != ERROR_SUCCESS)		return;	for (int i = 1; ; i++) {		DWORD size = ComUtil::buffsize;		TCHAR buff[ComUtil::buffsize];				if (RegEnumKeyEx(key, i, buff, &size, NULL, NULL, NULL, NULL) != ERROR_SUCCESS)			break;		load(buff);	}	key.Close();}/////////////////////////////////////////////////////////////////////////////void ComClasses::load(LPCTSTR key){	_ASSERTE(key);	TCHAR keyname[ComUtil::buffsize];	strcpy(keyname, rootKey);	strcat(keyname, _T("\\"));	strcat(keyname, key);	CRegKey regKey;	if (regKey.Open(HKEY_CLASSES_ROOT, keyname, KEY_READ) != ERROR_SUCCESS)		return;	TCHAR name[ComUtil::buffsize];	TCHAR progid[ComUtil::buffsize];	name[0] = _T('\0');	progid[0] = _T('\0');	DWORD count = ComUtil::buffsize;		regKey.QueryValue(name, _T(""), &count);	// lookup the ProgID	strcat(keyname, _T("\\ProgID"));		if (regKey.Open(HKEY_CLASSES_ROOT, keyname, KEY_READ) == ERROR_SUCCESS) {		regKey.QueryValue(progid, _T(""), &count);	}	// insert the entry into the map	if (_tcslen(name) > 0 || _tcslen(progid) > 0) {		ComClass *pclass = new ComClass();		pclass->clsid = key;		pclass->progid = progid;		pclass->name = name;		(*this)[key] = pclass;	}	regKey.Close();}/////////////////////////////////////////////////////////////////////////////ComClass * ComClasses::lookup(LPCTSTR key) const{	const_iterator it = find(key);	if (it == end())		return NULL;	return (*it).second;}/////////////////////////////////////////////////////////////////////////////ComInterfaces::ComInterfaces(){	load();}/////////////////////////////////////////////////////////////////////////////ComInterfaces::~ComInterfaces(){	clear();}/////////////////////////////////////////////////////////////////////////////void ComInterfaces::load(){	CRegKey key;	if (key.Open(HKEY_CLASSES_ROOT, rootKey, KEY_READ) != ERROR_SUCCESS)		return;	for (int i = 1; ; i++) {		DWORD size = ComUtil::buffsize;		TCHAR buff[ComUtil::buffsize];				if (RegEnumKeyEx(key, i, buff, &size, NULL, NULL, NULL, NULL) != ERROR_SUCCESS)			break;		load(buff);	}	key.Close();}/////////////////////////////////////////////////////////////////////////////void ComInterfaces::load(LPCTSTR key){	_ASSERTE(key);	TCHAR keyname[ComUtil::buffsize];	strcpy(keyname, rootKey);	strcat(keyname, _T("\\"));	strcat(keyname, key);	CRegKey regKey;	if (regKey.Open(HKEY_CLASSES_ROOT, keyname, KEY_READ) != ERROR_SUCCESS)		return;	TCHAR name[ComUtil::buffsize];	name[0] = _T('\0');	DWORD count = ComUtil::buffsize;		regKey.QueryValue(name, _T(""), &count);	// insert the entry into the map	if (_tcslen(name) > 0) {		(*this)[key] = name;	}	regKey.Close();}/////////////////////////////////////////////////////////////////////////////tstring ComInterfaces::lookup(LPCTSTR key) const{	const_iterator it = find(key);	if (it == end())		return NULL;	return (*it).second;}