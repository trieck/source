/////////////////////////////////////////////////////////////////////////////
//
// STACK.CPP : machine stack
//
// Copyright (c) 2006-2009, Thomas A. Rieck, All Rights Reserved
//

#include "common.h"
#include "Stack.h"
#include "Exception.h"

/////////////////////////////////////////////////////////////////////////////
Stack::Stack() : m_stackp(m_data)
{
}

/////////////////////////////////////////////////////////////////////////////
Stack::~Stack()
{
}

/////////////////////////////////////////////////////////////////////////////
void Stack::push(LPSYMBOL s)
{
	Datum d;
	d.sym = s;
	push(d);
}

/////////////////////////////////////////////////////////////////////////////
void Stack::push(word w)
{
	Datum d;
	d.value = w;
	push(d);
}

/////////////////////////////////////////////////////////////////////////////
void Stack::push(const Datum &d)
{
	if (m_stackp >= &m_data[NSTACK])
		throw Exception("stack too deep.");

	*m_stackp++ = d;
}

/////////////////////////////////////////////////////////////////////////////
Datum Stack::pop()
{
	if (m_stackp == m_data)
		throw Exception("stack underrun.");

	return *--m_stackp;
}

/////////////////////////////////////////////////////////////////////////////
void Stack::reset()
{
	m_stackp = m_data;
}
